 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var http = require("http");
var url = require("url");

var jsonResponse = {
  "unix": "",
  "natural": ""
};

function conMes(numeroMes) {
  // console.log(numeroMes);
  var conMes = "";
  switch(numeroMes) {
    case 0: 
      conMes = "January";
      break;
    case 1:
      conMes = "February";
      break;
    case 2:
      conMes = "March";
      break;
    case 3:
      conMes = "April";
      break;
    case 4:
      conMes = "May";
      break;
    case 5:
      conMes = "June";
      break;
    case 6:
      conMes = "July"
      break;
    case 7:
      conMes = "August";
      break;
    case 8:
      conMes = "September";
      break;
    case 9:
      conMes = "October";
      break;
    case 10:
      conMes = "November";
      break;
    case 11:
      conMes = "December";
      break;
  }
  return conMes;
}

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// app.route('/pepe').get(function(req, res) {
//   res.send('hello!');
// });

app.get('/:url', function(req, res) {
  console.log(req.params['url']);
  if (req.params['url'].match(/[a-z]/i)) {
    // alphabet letters found, is a natural.
    var diaString = req.params['url'];
    var date = new Date(diaString);
    // console.log(date.getMonth());
    // console.log(date);
    if (isNaN(date.getTime())) {
      jsonResponse['unix'] = null;
      jsonResponse['natural'] = null;
    } else {
      jsonResponse['unix'] = date.getTime();
      jsonResponse['natural'] = diaString;
    }    
  } else {
    //is a unix time.  
    var diaPosta = new Date(parseInt(req.params['url']));
    console.log(diaPosta);
    var month = conMes(diaPosta.getMonth());
    var day = diaPosta.getDate();
    var year = diaPosta.getFullYear();
    // console.log(month);
    // console.log(day);
    // console.log(year);
    if (isNaN(diaPosta.getTime())) {
      jsonResponse['natural'] = null;
      jsonResponse['unix'] = null;
    } else {
      jsonResponse['natural'] = month + " " + day + ", " + year;    
      jsonResponse['unix'] = req.params['url'];
    }    
  }
//   if (jsonResponse['unix'] == "" && jsonResponse['natural'] == "") {
      
//   }
  res.json(jsonResponse);
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})


app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});


